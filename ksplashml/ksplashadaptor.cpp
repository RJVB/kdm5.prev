/*
 * This file was generated by dbusidl2cpp version 0.4
 * when processing input file org.kde.ksplash.KSplash.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 */

#include "ksplashadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class KSplashAdaptor
 */

KSplashAdaptor::KSplashAdaptor(QObject *parent)
   : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

KSplashAdaptor::~KSplashAdaptor()
{
    // destructor
}

void KSplashAdaptor::close()
{
    // handle method call org.kde.ksplash.KSplash.close
    QMetaObject::invokeMethod(parent(), "close");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->close();
}

void KSplashAdaptor::programStarted(const QString &programIcon, const QString &programName, const QString &description)
{
    // handle method call org.kde.ksplash.KSplash.programStarted
    QMetaObject::invokeMethod(parent(), "programStarted", Q_ARG(QString, programIcon), Q_ARG(QString, programName), Q_ARG(QString, description));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->programStarted(programIcon, programName, description);
}

void KSplashAdaptor::setMaxProgress(int percent)
{
    // handle method call org.kde.ksplash.KSplash.setMaxProgress
    QMetaObject::invokeMethod(parent(), "setMaxProgress", Q_ARG(int, percent));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setMaxProgress(percent);
}

void KSplashAdaptor::setStartupItemCount(int count)
{
    // handle method call org.kde.ksplash.KSplash.setStartupItemCount
    QMetaObject::invokeMethod(parent(), "setStartupItemCount", Q_ARG(int, count));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setStartupItemCount(count);
}

void KSplashAdaptor::startupComplete()
{
    // handle method call org.kde.ksplash.KSplash.startupComplete
    QMetaObject::invokeMethod(parent(), "startupComplete");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->startupComplete();
}

void KSplashAdaptor::upAndRunning(const QString &component)
{
    // handle method call org.kde.ksplash.KSplash.upAndRunning
    QMetaObject::invokeMethod(parent(), "upAndRunning", Q_ARG(QString, component));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->upAndRunning(component);
}


#include "ksplashadaptor.moc"
