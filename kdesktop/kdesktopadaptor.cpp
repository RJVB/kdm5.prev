/*
 * This file was generated by dbusidl2cpp version 0.6
 * Command line was: dbusidl2cpp -m -a kdesktopadaptor -c KDesktopAdaptor -i desktop.h -l KDesktop -- org.kde.kdesktop.Desktop.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#include "kdesktopadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class KDesktopAdaptor
 */

KDesktopAdaptor::KDesktopAdaptor(KDesktop *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

KDesktopAdaptor::~KDesktopAdaptor()
{
    // destructor
}

QDBusObjectPath KDesktopAdaptor::background()
{
    // handle method call org.kde.kdesktop.Desktop.background
    QDBusObjectPath out0;
    out0 = parent()->background();
    return out0;
}

void KDesktopAdaptor::clearCommandHistory()
{
    // handle method call org.kde.kdesktop.Desktop.clearCommandHistory
    parent()->clearCommandHistory();
}

void KDesktopAdaptor::configure()
{
    // handle method call org.kde.kdesktop.Desktop.configure
    parent()->configure();
}

bool KDesktopAdaptor::isIconsEnabled()
{
    // handle method call org.kde.kdesktop.Desktop.isIconsEnabled
    bool out0;
    out0 = parent()->isIconsEnabled();
    return out0;
}

bool KDesktopAdaptor::isVRoot()
{
    // handle method call org.kde.kdesktop.Desktop.isVRoot
    bool out0;
    out0 = parent()->isVRoot();
    return out0;
}

void KDesktopAdaptor::lineupIcons()
{
    // handle method call org.kde.kdesktop.Desktop.lineupIcons
    parent()->lineupIcons();
}

void KDesktopAdaptor::logout()
{
    // handle method call org.kde.kdesktop.Desktop.logout
    parent()->logout();
}

void KDesktopAdaptor::popupExecuteCommand(const QString &command)
{
    // handle method call org.kde.kdesktop.Desktop.popupExecuteCommand
    parent()->popupExecuteCommand(command);
}

void KDesktopAdaptor::rearrangeIcons()
{
    // handle method call org.kde.kdesktop.Desktop.rearrangeIcons
    parent()->rearrangeIcons();
}

void KDesktopAdaptor::refresh()
{
    // handle method call org.kde.kdesktop.Desktop.refresh
    parent()->refresh();
}

void KDesktopAdaptor::refreshIcons()
{
    // handle method call org.kde.kdesktop.Desktop.refreshIcons
    parent()->refreshIcons();
}

void KDesktopAdaptor::runAutoStart()
{
    // handle method call org.kde.kdesktop.Desktop.runAutoStart
    parent()->runAutoStart();
}

QDBusObjectPath KDesktopAdaptor::screenSaver()
{
    // handle method call org.kde.kdesktop.Desktop.screenSaver
    QDBusObjectPath out0;
    out0 = parent()->screenSaver();
    return out0;
}

void KDesktopAdaptor::selectAll()
{
    // handle method call org.kde.kdesktop.Desktop.selectAll
    parent()->selectAll();
}

QStringList KDesktopAdaptor::selectedURLs()
{
    // handle method call org.kde.kdesktop.Desktop.selectedURLs
    QStringList out0;
    out0 = parent()->selectedURLs();
    return out0;
}

void KDesktopAdaptor::setIconsEnabled(bool enable)
{
    // handle method call org.kde.kdesktop.Desktop.setIconsEnabled
    parent()->setIconsEnabled(enable);
}

void KDesktopAdaptor::setVRoot(bool enable)
{
    // handle method call org.kde.kdesktop.Desktop.setVRoot
    parent()->setVRoot(enable);
}

void KDesktopAdaptor::switchDesktops(int delta)
{
    // handle method call org.kde.kdesktop.Desktop.switchDesktops
    parent()->switchDesktops(delta);
}

void KDesktopAdaptor::unselectAll()
{
    // handle method call org.kde.kdesktop.Desktop.unselectAll
    parent()->unselectAll();
}


#include "kdesktopadaptor.moc"
